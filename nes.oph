; -------------------------------------------------------------------------------------------------
; NES Hardware Definitions
;
; This is an attempt to capture all of the useful addresses typically used when
; accessing NES hardware.  Since there are memory addresses that overlap by
; number, but are in separate banks of RAM, each section below clarifies which
; memory bank the address is in.  (In the section headers.)  Most values used
; in each of these addresses are actually bit masks, so every individual bit
; has been separately described.
;
; In some cases an entire register is read only [R], write only [W], or both
; readable and writable [RW].  In other cases, individual bits in a register
; have different access rules.  The same symbols are used to indicate that.
; Some values must be written more than once to properly set the value.  In
; this case the symbol [W2] will be used.
; -------------------------------------------------------------------------------------------------

; -------------------------------------------------------------------------------------------------
; RAM Origins (CPU RAM Addresses)
; -------------------------------------------------------------------------------------------------
.alias ORIGIN_ZERO_PAGE      $0000     ; Start of Zero Page
.alias ORIGIN_STACK_PAGE     $0100     ; Start of Stack Page
.alias ORIGIN_ROM_START      $8000     ; Start of Cartidge ROM
.alias ORIGIN_ROM_16K        $C000     ; Start of 16K into ROM
.alias ORIGIN_VECTORS        $FFFA     ; Start of the CPU Vectors

; -------------------------------------------------------------------------------------------------
; PPU Registers (CPU RAM Addresses)
; -------------------------------------------------------------------------------------------------
.alias PPU_CONTROL           $2000     ; PPU Control [W]
                                       ; Bits: VPHB SINN
                                       ;   V = NMI enable
                                       ;   P = PPU master/slave
                                       ;   H = Sprite height
                                       ;     0: 8x8 / 1: 8x16
                                       ;   B = Background pattern table select
                                       ;     0: $0000 / 1: $1000
                                       ;   S = Sprite pattern table select
                                       ;     0: $0000 / 1: $1000
                                       ;   I = Increment mode
                                       ;     0: auto-increments writes to PPU_DATA by 1  (horizontal writes)
                                       ;     1: auto-increments writes to PPU_DATA by 32 (vertical writes)
                                       ;   N = Nametable select
                                       ;     00: $2000 / 01: $2400 / 10: $2800 / 11: $2C00
                                       ; Note: N is effectively the 9th (high) bit
                                       ;   of the PPUSCROLL value.

.alias PPU_MASK              $2001     ; PPU Mask [W]
                                       ; Bits: BGRs bCcg
                                       ;   B = Blue color emphasis
                                       ;   G = Green color emphasis
                                       ;   R = Red color emphasis
                                       ;   s = Sprites enabled
                                       ;   b = Background enabled
                                       ;   C = Sprite left column enable
                                       ;   c = Background left column enable
                                       ;   g = Greyscale mode

.alias PPU_STATUS            $2002     ; PPU Status [R]
                                       ; Bits: VSO- ----
                                       ;   V = Vertical blank
                                       ;   S = Sprite 0 hit
                                       ;   O = Sprite overflow
                                       ;   - = Not used
                                       ; Note: Read this to reset write pair for PPUSCROLL and PPUADDR

.alias OAM_ADDR              $2003     ; OAM Address [W]
                                       ; Bits: AAAA AAAA
                                       ;   A = Address in sprite table

.alias OAM_DATA              $2004     ; OAM Data [RW]
                                       ; Bits: DDDD DDDD
                                       ;   D = Data to write at OAMADDR in sprite table

.alias PPU_SCROLL            $2005     ; Name Table Scroll [W2]
                                       ; Bits: XXXX XXXX
                                       ;   X = Fine scroll position
                                       ; Note: Two writes.  First X scroll, then Y scroll.

.alias PPU_ADDR              $2006     ; PPU Memory Address [W2]
                                       ; Bits: AAAA AAAA
                                       ;   A = Address in PPU memory
                                       ; Note: Two writes.  Most significant byte then least significant byte.

.alias PPU_DATA              $2007     ; PPU Data Read/Write [RW]
                                       ; Bits: DDDD DDDD
                                       ;   D = Data to write at PPUADDR in PPU memory

.alias OAM_DMA               $4014     ; Sprite Memory DMA [W]
                                       ; Bits: AAAA AAAA
                                       ;   A = Page in CPU ram to DMA to sprite memory
                                       ; Note: Copies 256 bytes from $xx00-$xxFF in main RAM to sprite memory

; -------------------------------------------------------------------------------------------------
; Audio Registers (CPU RAM Addresses)
; -------------------------------------------------------------------------------------------------
.alias SND_SQ1_VOL           $4000     ; Duty and volume for square wave 1 [W]
                                       ; Bits: DDLC VVVV
                                       ;   D = Duty cycle
                                       ;   L = Length counter halt
                                       ;   C = Constant volume/envelope flag
                                       ;   V = Volume/envelope divider period

.alias SND_SQ1_SWEEP         $4001     ; Sweep control register for square wave 1 [W]
                                       ; Bits: EPPP NSSS
                                       ;   E = Enabled flag
                                       ;   P = The divider's period is P + 1 half-frames
                                       ;   N = Negate flag
                                       ;     0: add to period, sweeping toward lower frequencies
                                       ;     1: subtract from period, sweeping toward higher frequencies
                                       ;   S = Shift count (number of bits)
                                       ; Note: Sets the APU reload flag.

.alias SND_SQ1_LOW           $4002     ; Low byte of period for square wave 1 [W]
                                       ; Bits: LLLL LLLL
                                       ;   L = Timer low 8 bits

.alias SND_SQ1_HIGH          $4003     ; High byte of period and length counter value for square wave 1 [W]
                                       ; Bits: LLLL LHHH
                                       ;   L = Length counter load
                                       ;   H = Timer high 3 bits

.alias SND_SQ2_VOL           $4004     ; Duty and volume for square wave 2 [W]
                                       ; Bits: DDLC VVVV
                                       ;   D = Duty cycle
                                       ;   L = Length counter halt
                                       ;   C = Constant volume/envelope flag
                                       ;   V = Volume/envelope divider period

.alias SND_SQ2_SWEEP         $4005     ; Sweep control register for square wave 2 [W]
                                       ; Bits: EPPP NSSS
                                       ;   E = Enabled flag
                                       ;   P = The divider's period is P + 1 half-frames
                                       ;   N = Negate flag
                                       ;     0: add to period, sweeping toward lower frequencies
                                       ;     1: subtract from period, sweeping toward higher frequencies
                                       ;   S = Shift count (number of bits)
                                       ; Note: Sets the APU reload flag.

.alias SND_SQ2_LOW           $4006     ; Low byte of period for square wave 2 [W]
                                       ; Bits: LLLL LLLL
                                       ;   L = Timer low 8 bits

.alias SND_SQ2_HIGH          $4007     ; High byte of period and length counter value for square wave 2 [W]
                                       ; Bits: LLLL LHHH
                                       ;   L = Length counter load
                                       ;   H = Timer high 3 bits

.alias SND_TRI_LINEAR        $4008     ; Triangle wave linear counter [W]
                                       ; Bits: CRRR RRRR
                                       ;   C = Length counter halt / linear counter control
                                       ;   R = Linear counter load

.alias SND_TRI_LOW           $400A     ; Low byte of period for triangle wave [W]
                                       ; Bits: TTTT TTTT
                                       ;   T = Timer low byte

.alias SND_TRI_HIGH          $400B     ; High byte of period and length counter value for triangle wave [W]
                                       ; Bits: LLLL LTTT
                                       ;   L = Length counter load
                                       ;   T = Timer high byte

.alias SND_NOISE_VOL         $400C     ; Volume for noise generator [W]
                                       ; Bits: --LC VVVV
                                       ;   L = Envelope loop / length counter halt
                                       ;   C = Constant volume
                                       ;   V = Volume/envelope

.alias SND_NOISE_LOW         $400E     ; Period and waveform shape for noise generator [W]
                                       ; Bits: L--- PPPP
                                       ;   L = Loop noise
                                       ;   P = Noise period

.alias SND_NOISE_HIGH        $400F     ; Length counter value for noise generator [W]
                                       ; Bits: LLLL L---
                                       ;   L = Length counter load

.alias SND_DMC_FREQ          $4010     ; Play mode and frequency for DMC samples [W]
                                       ; Bits: IL-- FFFF
                                       ;   I = IRQ enable
                                       ;   L = Loop
                                       ;   F = Frequency

.alias SND_DMC_RAW           $4011     ; 7-bit DAC [W]
                                       ; Bits: -LLL LLLL
                                       ;   L = Load counter

.alias SND_DMC_START         $4012     ; Start of DMC waveform [W]
                                       ; Bits: AAAA AAAA
                                       ;   A = Sample address
                                       ; Note: At address $C000 + $40*$xx

.alias SND_DMC_LEN           $4013     ; Length of DMC waveform [W]
                                       ; Bits: LLLL LLLL
                                       ;   L = Sample length
                                       ; Note: Is $10*$xx + 1 bytes (128*$xx + 8 samples)

.alias SND_STATUS            $4015     ; Sound channels enable and status
                                       ; Bits: IF-D NT21
                                       ;   I = DMC Interrupt [R]
                                       ;   F = Frame Interrupt [R]
                                       ;   D = Enable DMC [RW]
                                       ;   N = Enable Noise [RW]
                                       ;   T = Enable Triangle [RW]
                                       ;   2 = Square 2 Enable [RW]
                                       ;   1 = Square 1 Enable [RW]

.alias SND_FRAME_COUNTER     $4017     ; Sount Frame Counter [W]
                                       ; Bits: MI-- ----
                                       ;   M = Mode
                                       ;     0: 4-step
                                       ;     1: 5-step
                                       ;   I = IRQ inhibit flag
                                       ;   - = Not used

; -------------------------------------------------------------------------------------------------
; Input Registers (CPU RAM Addresses)
; -------------------------------------------------------------------------------------------------
.alias JOYPAD_START          $4016     ; Joypad Start Latch [W2]
                                       ; Bits: ---- -EEC
                                       ;   - = Not used
                                       ;   E = Expansion port latch
                                       ;   C = Controller port latch
                                       ; Notes:
                                       ;   Write 1 to latch, then 0 to enable reading.
                                       ;   Use this to latch regardless of which joypad you are reading.

.alias JOYPAD1               $4016     ; Joypad 1 Data [R]
                                       ; Bits: ---- ---D
                                       ;   D = Input data bit
                                       ; Notes:
                                       ;   Read once for each button.
                                       ;   Buttons in this order:
                                       ;     A, B, Select, Start, Up, Down, Left, Right
                                       ;     0: Pressed
                                       ;     1: Not pressed

.alias JOYPAD2               $4017     ; Joypad 2 Data [R]
                                       ; Bits: ---- ---D
                                       ;   D = Input data bit
                                       ; Notes:
                                       ;   Read once for each button.
                                       ;   Buttons in this order:
                                       ;     A, B, Select, Start, Up, Down, Left, Right
                                       ;     0: Pressed
                                       ;     1: Not pressed

; -------------------------------------------------------------------------------------------------
; PPU Memory Map (PPU RAM Addresses)
; -------------------------------------------------------------------------------------------------
;  
; =====================================================================
;  Syntax Notes - How to use these
; =====================================================================
;  These are PPU RAM addresses, which means in general that they 
;  should be loaded as immediate values.  The syntax for that to 
;  work correctly is as follows:
;
;    lda #[>NAME_TABLE0]
;    sta PPU_ADDR
;    lda #[<NAME_TABLE0]
;    sta PPU_ADDR
; =====================================================================
;
; Definitions of mirroring for Name Tables
;   - Vertical mirroring means that the same data is visible in vertically
;     aligned name tables.  In other words, $2000 and $2800 are mirrored,
;     and $2400 and $2C00 are mirrored.  Vertical mirroring is generally
;     used for horizontal scrolling.
;   - Horizontal mirroring means that the same data is visible in horizontally
;     aligned name tables.  In other words, $2000 and $2400 are mirrored,
;     and $2800 and $2C00 are mirrored.  Horizontal mirroring is generally
;     used for vertical scrolling.
; Scroll values for both X and Y are 9-bit values (0-511) and are set by
; writing to PPU_SCROLL for the first 8-bits and then bits 0 and 1 in
; PPU_CONTROL make the 9th bit for each value.
;
;        (0,0)     (256,0)     (511,0)
;          +-----------+-----------+
;          |           |           |
;          |           |           |
;          |   $2000   |   $2400   |
;          |           |           |
;          |         0 | 1         |
;  (0,240) +-----------+-----------+ (511,240)
;          |         2 | 3         |
;          |           |           |
;          |   $2800   |   $2C00   |
;          |           |           |
;          |           |           |
;          +-----------+-----------+
;        (0,479)   (256,479)   (511,479)

; Pattern Tables are 4096 bytes each - 256 tiles of 16 bytes per tile
.alias PATTERN_TABLE0        $0000     ; Pattern Table 0
.alias PATTERN_TABLE1        $1000     ; Pattern Table 1

; Name Tables contain an associated attribute table.
; - 960 bytes for the name table
; - 64 bytes for the associated attribute table
; - 1024 bytes total
.alias NAME_TABLE0           $2000     ; 960-bytes Upper-Left Name Table
.alias NAME_TABLE1           $2400     ; 960-bytes Upper-Right Name Table
.alias NAME_TABLE2           $2800     ; 960-bytes Lower-Left Name Table
.alias NAME_TABLE3           $2C00     ; 960-bytes Lower-Right Name Table
.alias ATTRIB_TABLE0         $23C0     ; 64-bytes Upper-Left Attribute Table
.alias ATTRIB_TABLE1         $27C0     ; 64-bytes Upper-Right Attribute Table
.alias ATTRIB_TABLE2         $2BC0     ; 64-bytes Lower-Left Attribute Table
.alias ATTRIB_TABLE3         $2FC0     ; 64-bytes Lower-Right Attribute Table

; Palette Addresses in PPU Memory
; The palettes look like 32 total bytes, but there is some funky mirroring
; going on.  In the list below, there are * next to shared colors to make it 
; more clear how the entries are shared.  Each byte with a * is actually the 
; same byte of memory.  In practice this doesn't actually affect anything 
; because entry 0 of each sprite subpalette is used to represent transparency 
; and is never drawn. Sub-palettes are shown grouped together in square 
; brackets and are prefixed with the binary palette number used for sprites 
; and attribute tables.
;
; Background Palettes 
; 00 [00*  01   02   03]
; 01 [04   05   06   07]  
; 10 [08   09   0A   0B]   
; 11 [0C   0D   0E   0F]
;
; Sprite Palettes
; 00 [10*  11   12   13]
; 01 [14*  15   16   17]
; 10 [18*  19   1A   1B]
; 11 [1C*  1D   1E   1F]

.alias PAL_BG_COLOR          $3F00     ; 1-byte Universal background color
.alias PAL_ALL               $3F00     ; 32-byte All Palettes
.alias PAL_ALL_BG            $3F00     ; 16-byte All Background Palettes
.alias PAL_BG0               $3F01     ; 3-byte Background Palette 0
.alias PAL_BG1               $3F05     ; 3-byte Background Palette 1
.alias PAL_BG2               $3F09     ; 3-byte Background Palette 2
.alias PAL_BG3               $3F0D     ; 3-byte Background Palette 3
.alias PAL_ALL_SPRITE        $3F10     ; 16-byte All Sprite Palettes
.alias PAL_SPRITE0           $3F11     ; 3-byte Sprite Palette 0
.alias PAL_SPRITE1           $3F15     ; 3-byte Sprite Palette 1
.alias PAL_SPRITE2           $3F19     ; 3-byte Sprite Palette 2
.alias PAL_SPRITE3           $3F1D     ; 3-byte Sprite Palette 3
